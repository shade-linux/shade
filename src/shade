#!/usr/bin/env bash

source /etc/shade/config

export normal=$'\e[0m' # normal
export bold=$(tput bold)

# Normal colours
export black=$(tput setaf 0) # black
export red=$(tput setaf 1) # red
export green=$(tput setaf 2) # green
export yellow=$(tput setaf 3) # yellow
export blue=$(tput setaf 4) # blue
export magenta=$(tput setaf 5) # magenta
export cyan=$(tput setaf 6) # cyan
export white=$(tput setaf 7) # white

# Bold colours
export bold_black="$bold$black" # bold black
export bold_red="$bold$red" # bold red
export bold_green="$bold$green" # bold green
export bold_yellow="$bold$yellow" # bold yellow
export bold_blue="$bold$blue" # bold blue
export bold_magenta="$bold$magenta" # bold magenta
export bold_cyan="$bold$cyan" # bold cyan
export bold_white="$bold$white" # bold white

function success() {
    echo "${bold_green}${1}${normal}"
}

function error() {
    echo "${bold_red}${1}${normal}"
}

if [[ $OSTYPE = *darwin* ]]; then
    OS='darwin'
elif  [[ $OSTYPE = *linux* ]]; then
    OS='linux'
else
    error "Shade only supports Linux and macOS"
    exit 1
fi

function chkroot() {
    if [[ $EUID -ne 0 ]]; then
        error "Shade must be run as a root user"
        exit 1
    fi
}

function help() {
    cat <<EOF
Usage: shade [OPTION] [...]

Options:
    -h, --help      Show this text
    -s, --setup     Setup package manager
    -i, --install   Install a package
    -r, --remove    Remove a package
    -q, --query     Query packages
    -u, --update    Update buildscripts
    -U, --upgrade   Upgrade outdated packages
EOF
    
}

function setup() {
    chkroot
    success "Beginning setup"
    mkdir -p ${shade_dir} > /dev/null 2>&1
    mkdir -p ${shade_dir}/log/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/cache/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/bin/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/include/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/lib/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/share/ > /dev/null 2>&1
    git clone ${repo} ${shade_dir}/main/
    success "Setup done!"
}


function install() {
    chkroot
    for pack in ${@:2:9999}; do
        cat /usr/local/shade/main/packages/${pack} | grep -i $OS >/dev/null || error "Package not available for current platform"; exit 1
        read -r -p "${bold_green}Open ${pack} buildscript? [Y/n] ${normal}" response
        response=${response,,}
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
            ${pager} ${shade_dir}/main/packages/${pack}/package 2>/dev/null || error "${pack} buildscript not found!"
        fi
        read -r -p "${bold_green}Install ${pack}? [Y/n] ${normal}" response
        response=${response,,}
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
            find ${shade_dir} -name "*" > ${shade_dir}/main/packages/${pack}/pre-install
            success "Installing ${pack}"
            rm ${shade_dir}/cache/${pack} 2>/dev/null
            cd /usr/local/shade/cache/
            if ! bash ${shade_dir}/main/packages/${pack}/package; then
                error "${pack} failed to install!"
            else
                find ${shade_dir} -name "*" > ${shade_dir}/main/packages/${pack}/post-install
                echo ' ' > ${shade_dir}/main/packages/${pack}/installed
                success "${pack} installed!"
            fi
        fi
    done
}

function remove() {
    chkroot
    for pack in ${@:2:9999}; do
        read -r -p "${bold_green}Uninstall ${pack}? [Y/n] ${normal}" response
        response=${response,,}
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
            diff ${shade_dir}/main/packages/${pack}/pre-install ${shade_dir}/main/packages/${pack}/post-install | tail -n +2 | cut -c 3- | xargs rm -rf
            rm ${shade_dir}/main/packages/${pack}/installed
            success "${pack} uninstalled!"
        fi
    done
}

function query() {
    cat ${shade_dir}/main/packages/*${2,,}*/meta 2>/dev/null || error "${2} not found!"
}

function update() {
    chkroot
    success "Beginning update..."
    cd ${shade_dir}/main/
    if ! git pull; then
        error "Update failed!"
    else
        success "Update completed!"
    fi
}

function upgrade() {
    chkroot
    for i in $(find ${shade_dir}/main/packages -iname 'installed' -exec dirname {} \; | sed -e 's/\/.*\///g'); do
        cd ${shade_dir}/main/${i}
        if ! git pull | grep -q 'Already up to date'; then
            cd ..
            rm -rf ${i}
            bash ${shade_dir}/main/packages/${i}/package
        fi
    done
}

case "$1" in

    -h) help ;;
    --help) help ;;
    
    -s) setup ;;
    --setup) setup ;;

    -i) install $@ ;;
    --install) install $@ ;;

    -r) remove $@ ;;
    --remove) remove $@ ;;

    -q) query $@ ;;
    --query) query $@ ;;

    -u) update ;;
    --update) update ;;

    -U) upgrade ;;
    --upgrade) upgrade ;;

esac
