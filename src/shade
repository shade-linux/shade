#!/usr/bin/env bash


export prefix="/opt/shade"
export package_dir="${prefix}"/user/main/

export pager=cat


export normal=$'\e[0m' 
bold=$(tput bold) 
export bold


red="$(tput setaf 1)" 
export red
green="$(tput setaf 2)" 
export green
yellow="$(tput setaf 3)" 
export yellow
blue="$(tput setaf 4)" 
export blue


bold_red="$bold$red" 
export bold_red
bold_green="$bold$green" 
export bold_green
bold_yellow="$bold$yellow" 
export bold_yellow
bold_blue="$bold$blue" 
export bold_blue


function success() {
    echo "--> ${bold_green}${1}${normal}"
}


function info() {
    echo "--> ${blue}${1}${normal}"
}


function warn() {
    echo "--> ${bold_yellow}${1}${normal}"
}


function error() {
    echo "--> ${bold_red}${1}${normal}"
}


function fatal_error() {
    echo "--> ${bold_red}${1}${normal}"
    exit 1
}


function chkroot() {
    if [[ "${prefix}" == /opt/shade ]]; then
        if [[ "${EUID}" -ne 0 ]]; then
            fatal_error "Shade must be run as a root user"
        fi
    fi
}


function getinfo() {
    grep -i "^\# ${1}" "${package_dir}"/"${pack}"
}


function parse() {
  getinfo "${1}" | sed "s/^..$1..//"
}


function prompt() {
    read -rp "--> $1 [${green}Yes${normal}/${red}No${normal}] " response
}


if [[ $OSTYPE != *linux* ]]; then
    warn "Shade officially supports only Linux. Other operating systems may run shade, but issues may arise."
fi


function help() {
    cat <<EOF
Usage: shade [OPTION] [--local/--global] [...]

Options:
    help          Show this text
    init          Initialize buildscripts
    install       Install a package
    reinstall     Reinstall packages
    uninstall     Remove a package
    list          List all installed packages
    update        Update buildscripts
Flags:
    --local       Install package to ~/.shade
    --global      Install package to /opt/shade
EOF
}


function init() {
  info "Beginning initialization"
  mkdir ${prefix}
  mkdir -p ${prefix}/user/
  mkdir -p ${prefix}/user/main
  mkdir -p ${prefix}/user/info
  mkdir -p ${prefix}/user/cache
  mkdir -p ${prefix}/lib
  mkdir -p ${prefix}/bin
  mkdir -p ${prefix}/libexec
  mkdir -p ${prefix}/sbin
  mkdir -p ${prefix}/share
  echo 'https://github.com/shade-linux/buildscripts' >> "${prefix}"/repos
  while read i; do
    git clone "${i}" "${prefix}"/user/main/repo 2>> /tmp/shade-log
    mv "${prefix}"/user/main/repo/packages/* "${prefix}"/user/main/ 2>> /tmp/shade-log
    rm -rf "${prefix}"/user/main/repo/ 2>> /tmp/shade-log
  done < "${prefix}"/repos
  success "Initialization done"
  info "Add your own repos to ${prefix}/repos and run shade update [--local] to clone them"
}


function install() {
    chkroot
    export package_dir="${prefix}"/user/main/
    args=$(echo "${@}" | sed 's/--local//g' | sed 's/--global//g' | sed 's/install//g') 
    for pack in ${args}; do 
        if ! ls "${prefix}"/user/info/"${pack}"-installed >/dev/null 2>&1 ; then
            ls "${package_dir}"/"${pack}" >/dev/null 2>&1 || error "Package \"${pack}\" does not exist!" 
            deps=$(parse "deps") 
            export deps
            source=$(parse "source") 
            export source
            version=$(parse "ver") 
            export version
            if [[ $version =~ git ]]; then
                folder=$(parse "source" | sed 's/\/.*\///' | sed 's/\.git//' | sed 's/http.*://')
                export folder
            elif [[ $version =~ [0-9] ]]; then
                folder=$(parse "source" | sed 's/\/.*\///' | sed 's/http.*://' | sed 's/\-.*$//')
                export folder
                echo "${version}" > "${prefix}"/user/info/"${pack}"-version
            elif [[ $version =~ master ]]; then
                folder=$(parse "source" | sed 's/\/.*\///' | sed 's/http.*://' | sed 's/\..*$//')
                export folder
            fi
            info "Dependencies: $deps" 
            info "Please make sure these are installed"
            prompt "Open ${pack} buildscript?" 
            response=${response,,} 
            if [[ "${response}" =~ ^(yes|y| ) ]] || [[ -z "${response}" ]]; then 
                "${pager}" "${package_dir}"/"${pack}"
            fi
            prompt "Install ${pack}?" 
            response="${response,,}"
            if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
                start_time=$(date +%s)
                find "${prefix}" -name "*" > "${prefix}"/user/info/"${pack}"-pre-install 
                info "Installing ${pack}"
                cd "${prefix}"/user/cache/ || exit
                if bash "${package_dir}"/"${pack}" ; then
                    find "${prefix}" -name "*" > "${prefix}"/user/info/"${pack}"-post-install 
                    if [[ "${version}" =~ git ]]; then
                      cd "${prefix}"/user/cache/"${folder}" || exit
                      git rev-parse HEAD > "${prefix}"/user/info/"${pack}"-version
                    fi
                    touch "${prefix}"/user/info/"${pack}"-installed 
                    end_time=$(date +%s)
                    success "${pack} installed in $(((end_time-start_time)/60)) minutes"
                else error "${pack} failed to install"
                fi
            else warn "Skipping ${pack}"
            fi
        else warn "${pack} already installed, skipping"
        fi
    done
}


function uninstall() {
    chkroot
    export package_dir="{prefix}"/user/main/
    args=$(echo "${@}" | sed 's/--local//g' | sed 's/--global//g' | sed 's/uninstall//g') 
    for pack in ${args}; do
        ls "${package_dir}"/"${pack}" >/dev/null 2>&1 || error "Package \"${pack}\" does not exist!"
        ls "${prefix}"/user/info/"${pack}"-installed >/dev/null 2>&1 || error "Package ${pack} not installed!"
        prompt "Review files to remove?"
        if [[ "${response}" =~ ^(yes|y| ) ]] || [[ -z "${response}" ]]; then
          diff "${prefix}"/user/info/"${pack}"-pre-install "${prefix}"/user/info/"${pack}"-post-install | tail -n +2 | cut -c 3- | less 
        fi
        prompt "Uninstall ${pack}?"
        response=${response,,}
        if [[ "${response}" =~ ^(yes|y| ) ]] || [[ -z "${response}" ]]; then
            comm -13 "${prefix}"/user/info/"${pack}"-pre-install "${prefix}"/user/info/"${pack}"-post-install | xargs rm -rf 
            rm "${prefix}"/user/info/"${pack}"-installed "${prefix}"/user/info/"${pack}"-pre-install "${prefix}"/user/info/"${pack}"-post-install > /dev/null 2>&1 
            success "${pack} uninstalled!"
        fi
    done
}

function upgrade() {
  
  inst=$(ls "${prefix}"/user/info/*-installed)
  export package_dir="${prefix}"/user/main/
  export has_update=0
  for i in $inst; do
    pack=$(echo "${i}" | sed 's/-.*//g' | sed 's/\/.*\///g')
    version=$(parse "ver") 
    export
    if [[ $version =~ git ]]; then
        folder=$(parse "source" | sed 's/\/.*\///' | sed 's/\.git//' | sed 's/http.*://')
        export folder
        folder=$("${prefix}"/user/cache/"${folder}")
        export folder
        rm -rf "${folder}"
        echo ''
        echo "Checking for updates for ${pack}, please wait"
        git clone --depth=1 "$(parse source)" "${folder}" > /dev/null 2>&1
        cd "${folder}" || exit
        if [[ $(git rev-parse HEAD) != $(cat "${prefix}"/user/info/"${pack}"-version) ]]; then
            success "${pack} has updates available. Update with shade reinstall ${pack}"
            export has_update=$(( has_update+1 ))
        else
            info "${pack} has no updates available"
        fi
    elif [[ $version =~ [0-9] ]]; then
        folder=$(parse "source" | sed 's/\/.*\///' | sed 's/http.*://' | sed 's/\-.*$//')
        export folder
        folder=$("${prefix}"/user/cache/"${folder}")
        export folder
    elif [[ $version =~ master ]]; then
        folder=$(parse "source" | sed 's/\/.*\///' | sed 's/http.*://' | sed 's/\..*$//')
        export folder
        folder=$("${prefix}"/user/cache/"${folder}")
        export folder
    fi
  done
  echo
  if [[ "${has_update}" == 1 ]]; then
      success "${has_update} package has updates available"
  else
      success "${has_update} packages have updates available"
  fi
}


function update() {
    chkroot
    rm -rf "${prefix}"/user/main 
    mkdir "${prefix}"/user/main 
    while read i ; do 
      git clone "${i}" "${prefix}"/user/main/repo
      mv "${prefix}"/user/main/repo/packages/* "${prefix}"/user/main/
      rm -rf "${prefix}"/user/main/repo/
    done < "${prefix}"/repos
}


function reinstall() {
    uninstall "${@}"
    install "${@}"
}


function list() {
    info "Installed packages:"
    find "${prefix}"/user/info/*-installed 2>/tmp/shade-log | sed 's/\/.*\///g' | sed 's/-.*//g'
}

function chonky-packages() {
    export package_dir="${prefix}"/user/main/
    args=$(echo "${@}" | sed 's/--local//g' | sed 's/--global//g' | sed 's/chonky-packages//g') 
    for pack in ${args}; do
        comm -13 "${prefix}"/user/info/"${pack}"-pre-install "${prefix}"/user/info/"${pack}"-post-install > "${prefix}"/user/info/"${pack}"-size
        cat "${prefix}"/user/info/"${pack}"-size | xargs du -ch | grep -i ^total
    done
}


for i in "${@}"; do
    case "${i}" in
      '--local')
	prefix=$HOME/.shade ;;
      '--global') 
	prefix=/opt/shade ;;
    esac
done


case "$1" in
      '') help ;;
      help) help ;;
      init) init ;;
      setup) setup ;;
      install) install "${@}" ;;
      uninstall) uninstall "${@}" ;;
      update) update ;;
      upgrade) upgrade ;;
      reinstall) reinstall "${@}" ;;
      list) list ;;
      chonky-packages) chonky-packages "${@}" ;;
      *) error "$0: invalid option -- '$1'. Try '$0 help' for more information" ;;
esac
