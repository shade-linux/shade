#!/usr/bin/env bash
# Yes, this code is extremely messy. It might be some of the hackiest code I've ever written, and I apologize if it makes your eyes bleed

source /etc/shade/config # source config
shade_dir="/usr/local/shade"

export normal=$'\e[0m'   # normal
export bold=$(tput bold) # bold

# Normal colours
export black=$(tput setaf 0)   # black
export red=$(tput setaf 1)     # red
export green=$(tput setaf 2)   # green
export yellow=$(tput setaf 3)  # yellow
export blue=$(tput setaf 4)    # blue
export magenta=$(tput setaf 5) # magenta
export cyan=$(tput setaf 6)    # cyan
export white=$(tput setaf 7)   # white

# Bold colours
export bold_black="$bold$black"     # bold black
export bold_red="$bold$red"         # bold red
export bold_green="$bold$green"     # bold green
export bold_yellow="$bold$yellow"   # bold yellow
export bold_blue="$bold$blue"       # bold blue
export bold_magenta="$bold$magenta" # bold magenta
export bold_cyan="$bold$cyan"       # bold cyan
export bold_white="$bold$white"     # bold white

function success() {
    echo "${bold_green}${1}${normal}" # Bold green message
}

function info() {
    echo "${blue}${1}${normal}" # Blue message
}

function warn() {
    echo "${bold_yellow}${1}${normal}" # Yellow message
}

function error() {
    echo "${bold_red}${1}${normal}" # Bold red message
}

function fatal_error() {
    echo "${bold_red}${1}${normal}" # Bold red message
    exit 1
}

if [[ $OSTYPE = *darwin* ]]; then # macOS
    OS="Darwin"
elif  [[ $OSTYPE = *linux* ]]; then # Linux
    OS="Linux"
else
    error "Shade only supports Linux and macOS. Use at your own risk." # If you get this, you're not using Linux or macOS
fi

function chkroot() {
    if [[ $EUID -ne 0 ]]; then # This checks if you're a root user
        fatal_error "Shade must be run as a root user"
    fi
}

function help() {
    cat <<EOF
Usage: shade [OPTION] [...]

Options:
    help      Show this text
    setup     Setup package manager
    install   Install a package
    remove    Remove a package
    query     Query packages
    update    Update buildscripts
EOF
}

function setup() {
    chkroot # Checks if you're root
    success "Beginning setup"
    mkdir -p ${shade_dir} > /dev/null 2>&1
    mkdir -p ${shade_dir}/log/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/cache/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/bin/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/include/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/lib/ > /dev/null 2>&1
    mkdir -p ${shade_dir}/share/ > /dev/null 2>&1
    git clone ${repo} ${shade_dir}/main/ # These vars are sourced from /etc/shade/config. By default this is github.com/shade-linux/buildscripts, though you can change this to a fork or to the unstable branch
    success "Setup done!"
}


function install() {
    chkroot # Checks if you're root
    for pack in ${@:2:9999}; do # Splits arguments

        ls ${shade_dir}/main/packages/${pack} >/dev/null 2>&1 || fatal_error "Package ${pack} does not exist!"

        cat ${shade_dir}/main/packages/${pack}/meta | grep -i "^OS: .*${OS}" >/dev/null || warn "Package ${pack} not marked as available for current platform. Proceed with caution" # Checks if package is available for your current platform. You can comment this out, but some packages may not work

        deps=$(cat ${shade_dir}/main/packages/${pack}/meta | grep -i "^DEPS:" | cut -c 7-)
        info "Dependencies: $deps"
        info "Please make sure these are installed"

        read -r -p "Open ${pack} buildscript? [Y/n] " response # Yes/no prompt
        response=${response,,} # Makes your response lowercase
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then

            ${pager} ${shade_dir}/main/packages/${pack}/package 2>/dev/null || fatal_error "Package ${pack} buildscript not found!" # If response is yes, attempts to open buildscript

        fi

        read -r -p "Install ${pack}? [Y/n] " response # Yes/no prompt
        response=${response,,} # Makes your response lowercase
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then

            find ${shade_dir} -name "*" > ${shade_dir}/main/packages/${pack}/pre-install # Find which files exist, to help with uninstalling
            info "Installing ${pack}"
            cd ${shade_dir}/cache/ # Go to cache directory
            if ! bash ${shade_dir}/main/packages/${pack}/package 2>/dev/null; then # Run buildscript

                error "${pack} failed to install!"

            else

                find ${shade_dir} -name "*" > ${shade_dir}/main/packages/${pack}/post-install # Find which files exist now, and compare for uninstalling
                echo ' ' > ${shade_dir}/main/packages/${pack}/installed # Mark package as installed
                success "${pack} installed!"

            fi

        fi
    done
}

function uninstall() {
    chkroot # Checks if you're root

    for pack in ${@:2:9999}; do

        ls ${shade_dir}/main/packages/${pack} >/dev/null 2>&1 || fatal_error "Package ${pack} does not exist!"
        
        ls ${shade_dir}/main/packages/${pack}/installed >/dev/null 2>&1 || error "Package ${pack} not installed!"

        read -r -p "Uninstall ${pack}? [Y/n] " response
        response=${response,,}
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then

            diff ${shade_dir}/main/packages/${pack}/pre-install ${shade_dir}/main/packages/${pack}/post-install | tail -n +2 | cut -c 3- | xargs rm -rf # Diff the state of $shade_dir before and after install, and delete the resulting files
            rm ${shade_dir}/main/packages/${pack}/installed # Remove file indicating file was installed
            success "${pack} uninstalled!"

        fi

    done
}

function query() {
    search=$(find /usr/local/shade/main/packages/*/meta -type f -exec grep -li "${2}" {} \;)
    for i in ${search}; do
        
        name=$(cat ${i} | grep -i "^NAME:" | cut -c 7-)
        pkg=$(cat ${i} | grep -i "^PKG:" | cut -c 6-)
        desc=$(cat ${i} | grep -i "^DESC:" | cut -c 7-)
        deps=$(cat ${i} | grep -i "^DEPS:" | cut -c 7-)
        echo -e "Name: $name\nPackage name: $pkg\nDescription: $desc\nDependencies: $deps" | ack -i --passthru "${2,,}"
        echo

    done
}

function update() {
    chkroot # Checks if you're root
    success "Beginning update..."
    cd ${shade_dir}/main/
    if ! git pull; then # Checks if git pull showed an error
        error "Update failed!"
    else
        success "Update completed!"
    fi
}

case "$1" in

    '') help ;;
    
    help) help ;;
    
    setup) setup ;;

    install) install $@ ;;

    uninstall) uninstall $@ ;;

    query) query $@ ;;

    update) update ;;

    *) error "$0: invalid option -- '$1'. Try '$0 help' for more information" ;;

esac
