#!/usr/bin/env bash
# Yes, this code is extremely messy. It might be some of the hackiest code I've ever written, and I apologize if it makes your eyes bleed

export prefix="/opt/shade"
export package_dir="${prefix}/user/main/"
export pager=cat

export normal=$'\e[0m'   # normal
export bold=$(tput bold) # bold

# Normal colours
export black=$(tput setaf 0)   # black
export red=$(tput setaf 1)     # red
export green=$(tput setaf 2)   # green
export yellow=$(tput setaf 3)  # yellow
export blue=$(tput setaf 4)    # blue
export magenta=$(tput setaf 5) # magenta
export cyan=$(tput setaf 6)    # cyan
export white=$(tput setaf 7)   # white

# Bold colours
export bold_black="$bold$black"     # bold black
export bold_red="$bold$red"         # bold red
export bold_green="$bold$green"     # bold green
export bold_yellow="$bold$yellow"   # bold yellow
export bold_blue="$bold$blue"       # bold blue
export bold_magenta="$bold$magenta" # bold magenta
export bold_cyan="$bold$cyan"       # bold cyan
export bold_white="$bold$white"    # bold white

function success() {
    echo "${bold_green}${1}${normal}" # Bold green message
}

function info() {
    echo "${blue}${1}${normal}" # Blue message
}

function warn() {
    echo "${bold_yellow}${1}${normal}" # Yellow message
}

function error() {
    echo "${bold_red}${1}${normal}" # Bold red message
}

function fatal_error() {
    echo "${bold_red}${1}${normal}" # Bold red message
    exit 1
}

function chkroot() {
    if [[ $prefix == /opt/shade ]]; then
        if [[ $EUID -ne 0 ]]; then
            fatal_error "Shade must be run as a root user"
        fi
    fi
}

function getinfo() {
    cat ${package_dir}/${pack} | grep -i "^\# ${query}"
}

function parse() {
  query=$1
  getinfo $query | sed "s/^..$query..//"
}

function prompt() {
    read -rp "$1 [${green}Yes${normal}/${red}No${normal}] " response
}

if [[ $OSTYPE != *linux* ]] && [[ $OSTYPE != *darwin* ]]; then
    warn "Shade only supports Linux, with partial support for macOS. Issues for operating systems other than Linux will most likely be ignored"
fi

function help() {
    cat <<EOF
Usage: shade [OPTION] [--local/--global] [...]

Options:
    help          Show this text
    init          Initialize buildscripts
    setup         Setup package manager
    install       Install a package
    reinstall     Reinstall packages
    uninstall     Remove a package
    query         Query packages
    update        Update buildscripts
    refresh       Install packages specfied in config file
Flags:
    --local       Install package to ~/.shade
    --global      Install package to /opt/shade
}

function init() {
  info "Beginning initialization"
  mkdir -p ${prefix}/user/
  mkdir -p ${prefix}/user/main
  mkdir -p ${prefix}/user/info
  mkdir -p ${prefix}/user/cache
  mkdir -p ${prefix}/lib
  mkdir -p ${prefix}/bin
  mkdir -p ${prefix}/libexec
  mkdir -p ${prefix}/sbin
  mkdir -p ${prefix}/share
  echo 'https://github.com/shade-linux/buildscripts' >> ${prefix}/repos
  for i in $(cat ${prefix}/repos); do
    git clone $i ${prefix}/user/main/repo
    mv ${prefix}/user/main/repo/packages/* ${prefix}/user/main/
    rm -rf ${prefix}/user/main/repo/
 done
 success "Initialization done"
 info "Add your own repos to ${prefix}/repos and run shade update [--local] to clone them"
}

function install() {
    chkroot
    export package_dir="${prefix}/user/main/"
    args=$(echo $@ | sed 's/--local//g' | sed 's/--global//g' | sed 's/install//g')
    for pack in ${args}; do
        ls ${prefix}/user/info/${pack}-installed > /dev/null 2>&1
        if [ $? != "0" ]; then
            ls ${package_dir}/${pack} >/dev/null 2>&1 || error "Package ${pack} does not exist!"
            deps=$(parse "deps")
            info "Dependencies: $deps"
            info "Please make sure these are installed"
            prompt "Open ${pack} buildscript?"
            response=${response,,} # Makes your response lowercase
            if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
                ${pager} ${package_dir}/${pack}
            fi
            prompt "Install ${pack}?"
            response=${response,,} # Makes your response lowercase
            if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
                find ${prefix} -name "*" > ${prefix}/user/info/${pack}-pre-install
                info "Installing ${pack}"
                cd ${prefix}/user/cache/
                bash ${package_dir}/${pack}
                if [ $? = "0" ]; then
                    find ${prefix} -name "*" > ${prefix}/user/info/${pack}-post-install # Find which files exist, to help with uninstalling
                    touch ${prefix}/user/info/${pack}-installed
                    success "${pack} installed!"
                else
                    error "${pack} failed to install"
                fi
            else
                warn "Skipping ${pack}"
            fi
        else warn "${pack} already installed, skipping"
        fi
    done
}

function uninstall() {
    chkroot
    export package_dir="${prefix}/user/main/"
    args=$(echo $@ | sed 's/--local//g' | sed 's/--global//g' | sed 's/uninstall//g')
    for pack in ${args}; do
        ls ${package_dir}/${pack} >/dev/null 2>&1 || error "Package ${pack} does not exist!"
        ls ${prefix}/user/info/${pack}-installed >/dev/null 2>&1 || error "Package ${pack} not installed!"
        prompt "Review files to remove?"
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
          diff ${prefix}/user/info/${pack}-pre-install ${prefix}/user/info/${pack}-post-install | tail -n +2 | cut -c 3- | less
        fi
        prompt "Uninstall ${pack}?"
        response=${response,,}
        if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
            diff ${prefix}/user/info/${pack}-pre-install ${prefix}/user/info/${pack}-post-install | tail -n +2 | cut -c 3- | xargs rm -rf
            rm ${prefix}/user/info/${pack}-installed ${prefix}/user/info/${pack}-pre-install ${prefix}/user/info/${pack}-post-install > /dev/null 2>&1
            success "${pack} uninstalled!"
        fi
    done
}

function query() {
    for i in `grep -li "\# name: $2" ${package_dir}/*`; do
        echo Name: `grep -i "^\# name" $i | sed "s/^..name..//"`
        echo Package name: `grep -i "^\# pack" $i | sed "s/^..pack..//"`
        echo Description: `grep -i "^\# desc" $i | sed "s/^..desc..//"`
        echo Dependencies: `grep -i "^\# deps" $i | sed "s/^..deps..//"`
        echo Version: `grep -i "^\# ver" $i | sed "s/^..ver..//"`
    done 
}

function update() {
    chkroot
    rm -rf ${prefix}/user/main
    mkdir ${prefix}/user/main
    for i in $(cat ${prefix}/repos); do
      git clone $i ${prefix}/user/main/repo
      mv ${prefix}/user/main/repo/packages/* ${prefix}/user/main/
      rm -rf ${prefix}/user/main/repo/
    done
}

function reinstall() {
    uninstall $@
    install $@
}

for i in $@; do
    case $i in
      '--local') 
	prefix=$HOME/.shade ;;
      '--global') 
	prefix=/opt/shade ;;
    esac
done

case "$1" in
      '') help ;;
      'help') help ;;
      'init') init ;;
      'setup') setup ;;
      'install') install $@ ;;
      'uninstall') uninstall $@ ;;
      'query') query $@ ;;
      'update') update ;;
      'reinstall') reinstall $@ ;;
      '*') error "$0: invalid option -- '$1'. Try '$0 help' for more information" ;;
esac
